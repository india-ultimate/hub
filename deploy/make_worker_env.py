#!/usr/bin/env python

import os
from pathlib import Path

ROOT = Path(__file__).parent.parent

ENV = [
    "PATH",
    "PYTHONUNBUFFERED",
    # Django settings
    "DJANGO_SETTINGS_MODULE",
    "SECRET_KEY",
    "DATABASE_URL",
    "SECURE_SSL_REDIRECT",
    # Email settings
    "EMAIL_HOST_USER",
    "EMAIL_HOST_PASSWORD",
    "EMAIL_SECRET_KEY",
    "EMAIL_SUPPORT",
    "OTP_EMAIL_HASH_KEY",
    # Payment gateways
    "RAZORPAY_KEY_ID",
    "RAZORPAY_KEY_SECRET",
    "RAZORPAY_WEBHOOK_SECRET",
    "PHONEPE_MERCHANT_ID",
    "PHONEPE_SALT_KEY",
    "PHONEPE_SALT_INDEX",
    "PHONEPE_PRODUCTION",
    # Authentication
    "PASSKEY_TENANT_ID",
    "PASSKEY_SECRET_API_KEY",
    # Cloudinary
    "CLOUDINARY_CLOUD_NAME",
    "CLOUDINARY_API_KEY",
    "CLOUDINARY_API_SECRET",
]


def main() -> None:
    """
    Generate systemd environment file for the worker service.
    Writes to /etc/hub/worker.env or a local file for testing.
    """
    # Try to write to systemd location, fallback to local for testing
    systemd_path = Path("/etc/hub/worker.env")
    local_path = ROOT / "deploy" / "worker.env"

    # Determine output path
    if systemd_path.parent.exists() and os.access(systemd_path.parent, os.W_OK):
        output_path = systemd_path
    else:
        output_path = local_path
        print(f"Note: Writing to {output_path} (no write access to /etc/hub/)")

    with open(output_path, "w") as f:
        f.write("# Auto-generated environment file for Hub Worker\n")
        f.write("# Generated by deploy/make_worker_env.py\n\n")

        for var in ENV:
            value = os.environ.get(var, "")
            # Quote values that contain spaces or special characters
            if value and (" " in value or any(c in value for c in ["$", '"', "'"])):
                # Escape quotes and wrap in quotes
                value = value.replace('"', '\\"')
                f.write(f'{var}="{value}"\n')
            else:
                f.write(f"{var}={value}\n")

    print(f"Worker environment file written to: {output_path}")

    # Set appropriate permissions
    try:
        os.chmod(output_path, 0o600)
        print("Permissions set to 600 (read/write for owner only)")
    except Exception as e:
        print(f"Warning: Could not set permissions: {e}")


if __name__ == "__main__":
    main()
