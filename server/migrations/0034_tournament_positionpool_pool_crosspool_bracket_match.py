# Generated by Django 4.2.2 on 2023-10-04 12:46

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("server", "0033_accreditation_wfdf_id"),
    ]

    operations = [
        migrations.CreateModel(
            name="Tournament",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[("DFT", "Draft"), ("LIV", "Live"), ("COM", "Completed")],
                        default="DFT",
                        max_length=3,
                    ),
                ),
                ("initial_seeding", models.JSONField(default=dict)),
                ("current_seeding", models.JSONField(default=dict)),
                (
                    "event",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE, to="server.event"
                    ),
                ),
                ("teams", models.ManyToManyField(related_name="tournaments", to="server.team")),
            ],
        ),
        migrations.CreateModel(
            name="PositionPool",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("sequence_number", models.PositiveIntegerField()),
                ("name", models.CharField(default="NA", max_length=2)),
                ("initial_seeding", models.JSONField()),
                ("results", models.JSONField()),
                (
                    "tournament",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="server.tournament"
                    ),
                ),
            ],
            options={
                "unique_together": {("name", "tournament")},
            },
        ),
        migrations.CreateModel(
            name="Pool",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("sequence_number", models.PositiveIntegerField()),
                ("name", models.CharField(default="NA", max_length=2)),
                ("initial_seeding", models.JSONField()),
                ("results", models.JSONField()),
                (
                    "tournament",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="server.tournament"
                    ),
                ),
            ],
            options={
                "unique_together": {("name", "tournament")},
            },
        ),
        migrations.CreateModel(
            name="CrossPool",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("initial_seeding", models.JSONField(default=dict)),
                ("current_seeding", models.JSONField(default=dict)),
                (
                    "tournament",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="server.tournament"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Bracket",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("sequence_number", models.PositiveIntegerField()),
                ("name", models.CharField(default="1-8", max_length=5)),
                ("initial_seeding", models.JSONField()),
                ("current_seeding", models.JSONField()),
                (
                    "tournament",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="server.tournament"
                    ),
                ),
            ],
            options={
                "unique_together": {("name", "tournament")},
            },
        ),
        migrations.CreateModel(
            name="Match",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("sequence_number", models.PositiveIntegerField()),
                (
                    "status",
                    models.CharField(
                        choices=[("YTF", "Yet To Fix"), ("SCH", "Scheduled"), ("COM", "Completed")],
                        default="YTF",
                        max_length=3,
                    ),
                ),
                ("time", models.DateTimeField(blank=True, null=True)),
                ("field", models.CharField(blank=True, max_length=25, null=True)),
                ("placeholder_seed_1", models.PositiveIntegerField()),
                ("placeholder_seed_2", models.PositiveIntegerField()),
                ("score_team_1", models.PositiveIntegerField(default=0)),
                ("score_team_2", models.PositiveIntegerField(default=0)),
                (
                    "bracket",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="server.bracket",
                    ),
                ),
                (
                    "cross_pool",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="server.crosspool",
                    ),
                ),
                (
                    "pool",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="server.pool",
                    ),
                ),
                (
                    "position_pool",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="server.positionpool",
                    ),
                ),
                (
                    "team_1",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="team_1",
                        to="server.team",
                    ),
                ),
                (
                    "team_2",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="team_2",
                        to="server.team",
                    ),
                ),
                (
                    "tournament",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="server.tournament"
                    ),
                ),
            ],
            options={
                "unique_together": {("tournament", "time", "field")},
            },
        ),
    ]
